@model ASPJ_Project.Models.user
@using CaptchaMvc.HtmlHelpers

@{
    <!--Layout = "~/Views/Shared/_Layout.cshtml";-->
    Layout = "~/Content/Login/_Layout.cshtml";
}

<!DOCTYPE html>

<html>
<head>


    <meta name="viewport" content="width=device-width" />
    <title>Registration</title>
    <style type="text/css">

        .error {
            color: red;
        }


    </style>
    <script src="~/Scripts/jquery-1.12.4.js"></script>
    <script src="~/Scripts/jquery.validate.js"></script>
    <script src="~/Scripts/jquery.validate.unobtrusive.js"></script>
</head>

<body>
     <div class="limiter">
		<div class="container-login100" style="background-image: url('Content/Login/images/bg-01.jpg');">
			<div class="wrap-login100">

            @using (Html.BeginForm())
                {
                  @Html.AntiForgeryToken()

                <form class="login100-form validate-form">
					 <span class="login100-form-title p-b-34 p-t-27">Registration</span>
					

            <div class="form-horizontal">

                <hr />
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })




                <div class="form-group">
                    @Html.LabelFor(model => model.userName, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="wrap-input100 validate-input" data-validate = "Enter username">
                    
                        @Html.EditorFor(model => model.userName, new { htmlAttributes = new { @class = "form-control, input100" } })
                       
                    <span class="focus-input100"></span>
                                <br /> 
                        @Html.ValidationMessageFor(model => model.userName, "", new { @class = "text-danger" })
                    </div>

                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.password, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="wrap-input100 validate-input" data-validate = "Enter username">
                    
                        @Html.EditorFor(model => model.password, new { htmlAttributes = new { @class = "form-control, input100" } })
                         
                    <span class="focus-input100"></span>
                                <br />    
                    @Html.ValidationMessageFor(model => model.password, "", new { @class = "text-danger" })
                    </div>
                </div>



                <div class="form-group">
                    @Html.LabelFor(model => model.confirmPassword, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="wrap-input100 validate-input" data-validate = "Enter username">
                    
                        @Html.EditorFor(model => model.confirmPassword, new { htmlAttributes = new { @class = "form-control, input100"} })
                         
                    <span class="focus-input100"></span>
                                <br /> 
                        @Html.ValidationMessageFor(model => model.confirmPassword, "", new { @class = "text-danger" })
                    </div>
                </div>


                <div class="form-group">
                    @Html.LabelFor(model => model.firstName, htmlAttributes: new { @class = "control-label col-md-2" })
                     <div class="wrap-input100 validate-input" data-validate = "Enter username">
                    
                        @Html.EditorFor(model => model.firstName, new { htmlAttributes = new { @class = "form-control, input100" } })
                         
                    <span class="focus-input100"></span>
                                <br /> 
                         @Html.ValidationMessageFor(model => model.firstName, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.lastName, htmlAttributes: new { @class = "control-label col-md-2" })
                     <div class="wrap-input100 validate-input" data-validate = "Enter username">
                    
                        @Html.EditorFor(model => model.lastName, new { htmlAttributes = new { @class = "form-control, input100" } })
                         
                    <span class="focus-input100"></span>
                                <br /> 
                         @Html.ValidationMessageFor(model => model.lastName, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.email, htmlAttributes: new { @class = "control-label col-md-2" })
                     <div class="wrap-input100 validate-input" data-validate = "Enter username">
                    
                        @Html.EditorFor(model => model.email, new { htmlAttributes = new { @class = "form-control, input100" } })
                        
                    <span class="focus-input100"></span>
                                <br /> 
                         @Html.ValidationMessageFor(model => model.email, "", new { @class = "text-danger" })
                        @Html.ValidationMessage("EmailExist", new { @class = "text-danger"})
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.phoneNumber, htmlAttributes: new { @class = "control-label col-md-2" })
                     <div class="wrap-input100 validate-input" data-validate = "Enter username">
                    
                        @Html.EditorFor(model => model.phoneNumber, new { htmlAttributes = new { @class = "form-control, input100"} })
                         
                    <span class="focus-input100"></span>
                                <br /> 
                         @Html.ValidationMessageFor(model => model.phoneNumber, "", new { @class = "text-danger" })
                       
                    </div>
                </div>
                <div class="form-group">
                    
                    <div class="wrap-input100 validate-input" data-validate = "Enter username">
                    
                        @Html.MathCaptcha()
                              
                    <span class="focus-input100"></span>
                                <br /> 
                        @Html.ValidationMessageFor(model => model.captcha, "", new { @class = "text-danger" })
                        <p class="has-error">@ViewBag.ErrorMessage</p>

                        <span class="field-validation-valid text-danger" data-valmsg-for="captcha" data-valmsg-replace="true" id="vali_CaptchaInputText"></span>
                    </div>
                </div>


               <div class="form-group, container-login100-form-btn">
                    <div class="col-md-offset-2 col-md-10">
                        <input type="submit" value="Register" class="login100-form-btn"  />
                    </div>
                </div>
            </div>
          </form>
            if (ViewBag.Message != null)
            {
                <div class="alert alert-danger">
                    @ViewBag.Message
                    @ViewBag.ErrorMessage
                </div>
            }
        }



  
            <div>
                @Html.ActionLink("Login", "Login")
            </div>



        </div>
     </div>
</div>
    
</body>
</html>